pub trait ArtKey {
    fn get_size(&self) -> usize;
    fn get_byte(&self, index: usize) -> u8;
    fn get_bytes(&self, buff: &mut [u8], from: usize, len: usize);
}

trait ArtKey {
    fn bytes(&self) -> &[u8];
}

let depth: usize;
let key: K;

key.bytes()[depth..]

struct Leaf<K, V> {
    key: K,
    value: V,
    depth: usize,
}

#[derive(Debug)]
pub enum ArtNode<K, V> {
    Empty,
    Inner4(Box<ArtNode4<K, V>>),
    Inner16(Box<ArtNode16<K, V>>),
    Inner48(Box<ArtNode48<K, V>>),
    Inner256(Box<ArtNode256<K, V>>),
    
    LeafLargeKey(Box<ArtNodeLeaf<K, V>>),
    LeafSmallKey([u8; 8], Box<V>), // K
    LeafSmall([u8; 8]), // (K, V)
}


impl<T: Serde> ArtKey for T {
}

EMPTY_CELL = 0

struct My(u64);

let my = My(183285);

let x: u64 = my.0;


pub trait ArtNodeTrait<K, V> {

    fn to_art_node(self: Box<Self>) -> ArtNode<K, V> {
    
    }

    fn to_art_node<Wrap: Deref<Target=Self>>(self: Wrap<Self>)
}
